02_sdk-generation.txt
---------------------

You are an autonomous TypeScript engineer.  The environment scaffold from “01_environment-setup.txt” already exists.  Your task in this run is to generate the complete CallPurity SDK source code and a unit-test suite inside the sdk/ workspace.

────────────────────────────────────────────────
ARCHITECTURE GUIDELINES
────────────────────────────────────────────────

1. Shared HTTP client
   • File: sdk/client.ts  
   • Use Axios.  Create the instance with:
       - baseURL from config.API_BASE_URL
       - timeout 15 000 ms
       - JSON headers
   • Expose a CallPurityClient interface and a default export
   • Add an Axios response interceptor; throw ApiError on non-2xx; map 4xx/5xx codes.

2. Environment / config
   • sdk/config.ts already loads dotenv.  Export:
       - API_BASE_URL
       - getAccessToken() / setAccessToken() helpers for runtime token storage.

3. Modules (each in sdk/modules/)
   • Each file exports a **named factory** createXModule(client: AxiosInstance) returning typed methods.

   - auth.ts  
     · login(email, password) → { accessToken, refreshToken, expiresIn, expiresAt }  
     · refresh(refreshToken)  → same shape  
     · On login success, call setAccessToken.

   - accounts.ts  
     · get(accountId)  
     · list()

   - organizations.ts  
     · get(accountId, organizationId)  
     · create(accountId, payload)

   - dids.ts  
     · list(accountId, orgId, page = 1, pageSize = 20)  
     · get(accountId, orgId, number)  
     · add(accountId, orgId, number, brandedName?)  
     · remove(accountId, orgId, number)  
     · bulk(accountId, orgId, action, numbers) — action: "add" | "delete"

4. Types & Validators
   • sdk/types.ts — request/response interfaces derived from CallPurity docs.  
   • sdk/utils/validators.ts — isValidPhoneNumber, isValidEIN per API regexes.

5. Compose SDK
   • client.ts assembles modules into:

       export const CallPuritySDK = {
         auth: createAuthModule(instance),
         accounts: createAccountsModule(instance),
         organizations: createOrganizationsModule(instance),
         dids: createDidsModule(instance)
       } satisfies CallPurityClient;

6. Index script
   • sdk/index.ts demonstrates:
       await CallPuritySDK.auth.login(process.env.EMAIL!, process.env.PASSWORD!);
       console.log(await CallPuritySDK.accounts.list());

7. Unit tests (Vitest)
   • Add devDep “vitest”; update package.json script "test": "vitest".
   • Tests in sdk/test/:
       - auth.test.ts — mocks Axios, asserts token storage
       - dids.test.ts — mocks list/add/remove flow
       - accounts.test.ts — mocks get() and list() with fake data
       - organizations.test.ts — mocks get() and create(), validates payloads
       
8. No linting setup required.

────────────────────────────────────────────────
DELIVERABLE FORMAT
────────────────────────────────────────────────

Return **unified diff patches** that add or modify files only inside sdk/ plus any package.json changes.  Use the standard form:

--- a/path/to/file
+++ b/path/to/file
@@
 existing line
+ added line
@@

If a file is new, diff from /dev/null.  
After all diff blocks, print:

echo "SDK generation complete"

No additional commentary, no markdown fences.