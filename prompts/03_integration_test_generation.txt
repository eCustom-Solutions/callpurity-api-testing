# 03_integration_test_generation.txt
# Integration-Test Wing – Build-out Plan
# CallPurity SDK

------------------------------------------------------------------------
CONTENTS
------------------------------------------------------------------------
1. Rationale & Scope
2. Directory Refactor
3. Vitest Integration Configuration
4. Environment & Secrets Handling
5. Example Integration Test Skeletons
6. NPM Scripts
7. CI Considerations
8. Test-Results Logging
9. Future Enhancements
10. Finalization Steps
------------------------------------------------------------------------


1. RATIONALE & SCOPE
--------------------
* Purpose: add **live** (sandbox-targeted) API tests without polluting the pure-unit suite.
* Constraints:
  - Only sandbox endpoint exists today.
  - No separate test runner; stick with **Vitest** to avoid dual-runner bloat.
* Success:
  - `npm run test:integration` exercises real HTTP flows.
  - Unit tests stay fast/offline – no network, no side effects.
  - CI can gate on unit tests and run integration tests on demand or nightly.


2. DIRECTORY REFACTOR
---------------------
Current layout
```
sdk/
  test/
    auth.test.ts
    accounts.test.ts
    ...
```

Proposed layout
```
sdk/
  test/
    unit/                        # ← existing files move here
      auth.test.ts
      accounts.test.ts
      dids.test.ts
      organizations.test.ts

    integration/                 # ← new wing
      auth.integration.test.ts
      dids.integration.test.ts
      accounts.integration.test.ts
      organizations.integration.test.ts

    TEST_RESULTS.unit.md
    TEST_RESULTS.integration.md
```
*Rule of thumb:* “unit” folder **never** calls real network; “integration” folder **always** does.


3. VITEST INTEGRATION CONFIGURATION
-----------------------------------
```ts
// vitest.integration.config.ts
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    include: ['test/integration/**/*.test.ts'],
    testTimeout: 15000,           // sandbox is slow
    setupFiles: ['dotenv/config'],// pulls .env automatically
    reporters: 'verbose',
    env: { VITEST_MODE: 'integration' }, // runtime flag if needed
    // serial: true,               // enable if sandbox state is shared
  },
});
```
*Keep the existing* `vitest.config.ts` *for unit tests only* (or rename to `vitest.unit.config.ts` for clarity).


4. ENVIRONMENT & SECRETS HANDLING
---------------------------------
```
sdk/
  .env                  # stores all credentials for testing
  .env.example          # template for required keys
```

Best practice:
* Do **not** check real credentials into VCS.
* Integration tests expect:
  - `EMAIL`
  - `PASSWORD`
  - `API_BASE_URL`
  - Optional: `TEST_ACCOUNT_ID`, `TEST_ORG_ID` for deterministic IDs.

Access in tests via `process.env`.


5. EXAMPLE INTEGRATION TEST SKELETONS
-------------------------------------
`test/integration/auth.integration.test.ts`
```ts
import { describe, it, expect } from 'vitest';
import CallPuritySDK from '../../client.js';

describe('Auth (integration)', () => {
  it('logs in and refreshes', async () => {
    const login = await CallPuritySDK.auth.login(
      process.env.EMAIL!,
      process.env.PASSWORD!
    );

    expect(login).toHaveProperty('access_token');

    const refreshed = await CallPuritySDK.auth.refresh(login.refresh_token);
    expect(refreshed.access_token).not.toBe(login.access_token);
  });
});
```

`test/integration/dids.integration.test.ts`
```ts
import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import CallPuritySDK from '../../client.js';

const num = '+15551231234';
const accountId = process.env.TEST_ACCOUNT_ID!;
const orgId     = process.env.TEST_ORG_ID!;

describe('DIDs (integration)', () => {
  beforeAll(async () =>
    CallPuritySDK.auth.login(process.env.EMAIL!, process.env.PASSWORD!)
  );

  it('adds and removes a DID', async () => {
    await CallPuritySDK.dids.add(accountId, orgId, num, 'Integration DID');
    const dids = await CallPuritySDK.dids.list(accountId, orgId);
    expect(dids.data.some(d => d.number === num)).toBe(true);

    await CallPuritySDK.dids.remove(accountId, orgId, num);
    const postRemoval = await CallPuritySDK.dids.list(accountId, orgId);
    expect(postRemoval.data.some(d => d.number === num)).toBe(false);
  });

  afterAll(async () => {
    // ensure cleanup even if assertions fail
    try { await CallPuritySDK.dids.remove(accountId, orgId, num); } catch {}
  });
});
```


6. NPM SCRIPTS
--------------
In `package.json`
```json
{
  "scripts": {
    "test":        "vitest run --config vitest.unit.config.ts",
    "test:unit":   "vitest run --config vitest.unit.config.ts",
    "test:int":    "vitest run --config vitest.integration.config.ts",
    "test:watch":  "vitest --watch",
    "coverage":    "vitest run --coverage"
  }
}
```
*Alias* `test:int` for shorter CI calls.


7. CI CONSIDERATIONS
--------------------
* Example GitHub Actions matrix:
  - **Unit stage** → runs on every push / PR.
  - **Integration stage** → nightly or on branch label (`ci=integration`).
* Cache `~/.npm` to speed cold starts.
* Mask secrets (`SANDBOX_*`) in logs.
* Fail-fast: if sandbox 502/504 errors >3 consecutive runs, mark as “skipped” to avoid red builds for vendor downtime.


8. TEST-RESULTS LOGGING
-----------------------
* Cursor is responsible for generating and appending test logs:
  - After integration tests are run, review the output.
  - Manually add pass/fail summaries and timestamps to `test/TEST_RESULTS.integration.md`.
  - This preserves human-readable notes and avoids automation flakiness.
* Git-ignore the generated file—or commit if historical logs are useful.


9. FUTURE ENHANCEMENTS
----------------------
* **Retry helper** – wrap flaky requests with exponential back-off.
* **Parameterized tests** – run the same flows across multiple numbers/orgs.
* **Production toggle** – once live API exists, introduce `.env.prod` and CI job gating on a `PROD_TEST` flag.
* **Load test** – use k6 / Artillery outside of Vitest to simulate high-volume DID bulk operations.

------------------------------------------------------------------------

10. FINALIZATION STEPS
----------------------
* After implementing the test structure, complete the following checklist:

1. **Update README(s)**:
   - Document how to run integration tests
   - Mention new NPM scripts (`test:int`, `test:unit`)
   - Add `.env` keys to the env setup section
   - Clarify that integration tests hit real API endpoints and require valid credentials

2. **Manual Verification**:
   - Run `npm run test:unit` and `npm run test:int` separately
   - Confirm correct loading of `.env`
   - Check that integration test results are written to `TEST_RESULTS.integration.md`

3. **Version Control**:
   - Stage modified and added files
   - Commit with message: `Add integration test framework and structure`
   - Push to branch or open PR as appropriate

------------------------------------------------------------------------
END OF PLAN
------------------------------------------------------------------------
